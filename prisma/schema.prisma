datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") 
}

generator client {
  provider = "prisma-client-js" 
  previewFeatures = ["postgresqlExtensions"] 
}

generator dbml {
  provider        = "prisma-dbml-generator" 
  extensions = [pgvector(map: "vector", schema: "extensions")]  
}

model Account {
  id                String  @id @default(cuid()) // String ID
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid()) // String ID
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String     @id @default(cuid()) // String ID
  email         String     @unique
  passwordHash  String?
  name          String?
  image         String?
  emailVerified DateTime?
  socketId      String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  accounts      Account[]
  sessions      Session[]
  blogs         Blog[]
  volgs         Vlog[]
  photos        PhotoData[]
  tripPlans     TripPlan[]
  membersOfTrip TripPlan[] @relation("TripPlanMembers")

  @@index([email])
}

model TripPlan {
  id            String         @id @default(cuid()) // String ID
  title         String
  author        User           @relation(fields: [authorId], references: [id])
  authorId      String
  members       User[]         @relation("TripPlanMembers")
  startDate     DateTime
  endDate       DateTime
  data          Json
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  location      String?
  photos        PhotoData[]
  vlogs         Vlog[]
  notifications Notification[]
  blogs         Blog[]

  @@index([authorId])
}

model Notification {
  id         String   @id @default(cuid()) // String ID
  tripPlan   TripPlan @relation(fields: [tripPlanId], references: [id])
  tripPlanId String
  content    String
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Blog {
  id         String   @id @default(cuid()) // String ID
  title      String
  content    String
  author     User     @relation(fields: [authorId], references: [id])
  authorId   String
  status     STAUS    @default(PRIVATE)
  tripPlan   TripPlan @relation(fields: [tripPlanId], references: [id])
  tripPlanId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Vlog {
  id         String   @id @default(cuid()) // String ID
  title      String
  content    String
  author     User     @relation(fields: [authorId], references: [id])
  authorId   String
  status     STAUS    @default(PRIVATE)
  tripPlan   TripPlan @relation(fields: [tripPlanId], references: [id])
  tripPlanId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model PhotoData {
  id           String                @id @default(cuid()) // String ID
  url          String
  author       User                  @relation(fields: [authorId], references: [id])
  tripPlan     TripPlan              @relation(fields: [tripPlanId], references: [id])
  tripPlanId   String
  authorId     String
  caption      String?
  status       STAUS                 @default(PRIVATE)
  // imageEmbedding            Unsupported("vector")?
  location     String?
  features     String?      
  timeInString String?
  device       String?
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
}

enum STAUS {
  PUBLIC
  PRIVATE
}
